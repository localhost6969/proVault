var U=Object.defineProperty;var F=(m,s,t)=>s in m?U(m,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):m[s]=t;var g=(m,s,t)=>(F(m,typeof s!="symbol"?s+"":s,t),t);import{az as $,ai as N,aA as b,m as W,A as x,o as _,aB as z,p as D,q as M,s as V,x as K,G as B,v as T,z as Q,E as G,F as H,H as Y,B as l,a8 as y,a9 as A,I as k,T as f,as as j,Q as O,V as J,a1 as S,am as Z,aC as R,aD as X,aE as w,aF as tt,aG as rt,aH as at,aI as et,aJ as nt,aK as L,aL as st}from"./index-2c0fe92c.js";import{h as ot}from"./hasERC20Allowance-ce0caebc.browser.esm-361e6ddc.js";import{S as ct}from"./erc-1155-standard-0db4e274.browser.esm-3222b2d3.js";const v=(()=>R.object({contractAddress:st}))(),dt=(()=>v.extend({quantity:L}))(),it=(()=>v.extend({tokenId:w}))(),pt=(()=>v.extend({tokenId:w,quantity:w}))(),ht=(()=>dt.omit({quantity:!0}).extend({quantityPerReward:L}))(),ut=it,gt=(()=>pt.omit({quantity:!0}).extend({quantityPerReward:w}))(),lt=(()=>ht.extend({totalRewards:w.default("1")}))(),wt=ut,mt=(()=>gt.extend({totalRewards:w.default("1")}))(),q=(()=>R.object({erc20Rewards:R.array(lt).default([]),erc721Rewards:R.array(wt).default([]),erc1155Rewards:R.array(mt).default([])}))(),kt=(()=>q.extend({packMetadata:X,rewardsPerPack:w.default("1"),openStartTime:tt.default(new Date)}))();class ft{constructor(s,t,e,n,r){g(this,"featureName",b.name);g(this,"open",k((()=>{var s=this;return async function(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;return f.fromContractWrapper({contractWrapper:s.contractWrapper,method:"openPack",args:[t,e],overrides:{gasLimit:n},parse:r=>{let o=l.from(0);try{o=s.contractWrapper.parseLogs("PackOpenRequested",r==null?void 0:r.logs)[0].args.requestId}catch{}return{receipt:r,id:o}}})}})()));g(this,"claimRewards",k((()=>{var s=this;return async function(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:5e5;return f.fromContractWrapper({contractWrapper:s.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:t},parse:async e=>{const n=s.contractWrapper.parseLogs("PackOpened",e==null?void 0:e.logs);if(n.length===0)throw new Error("PackOpened event not found");const r=n[0].args.rewardUnitsDistributed;return await s.parseRewards(r)}})}})()));let o=arguments.length>5&&arguments[5]!==void 0?arguments[5]:new W(s,t,rt,n,e);this.contractWrapper=o,this.storage=e,this.chainId=r,this.events=new T(this.contractWrapper)}onNetworkUpdated(s){this.contractWrapper.updateSignerOrProvider(s)}getAddress(){return this.contractWrapper.address}async parseRewards(s){const t=[],e=[],n=[];for(const r of s)switch(r.tokenType){case 0:{const o=await y(this.contractWrapper.getProvider(),r.assetContract);t.push({contractAddress:r.assetContract,quantityPerReward:A(r.totalAmount,o.decimals).toString()});break}case 1:{e.push({contractAddress:r.assetContract,tokenId:r.tokenId.toString()});break}case 2:{n.push({contractAddress:r.assetContract,tokenId:r.tokenId.toString(),quantityPerReward:r.totalAmount.toString()});break}}return{erc20Rewards:t,erc721Rewards:e,erc1155Rewards:n}}async addPackOpenEventListener(s){return this.events.addEventListener("PackOpened",async t=>{s(t.data.packId.toString(),t.data.opener,await this.parseRewards(t.data.rewardUnitsDistributed))})}async canClaimRewards(s){const t=await O(s||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("canClaimRewards",[t])}async openAndClaim(s){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;const n=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[s,t,e],{gasLimit:l.from(5e5)});let r=l.from(0);try{r=this.contractWrapper.parseLogs("PackOpenRequested",n==null?void 0:n.logs)[0].args.requestId}catch{}return{receipt:n,id:r}}async getLinkBalance(){return this.getLinkContract().balanceOf(this.contractWrapper.address)}async transferLink(s){await this.getLinkContract().transfer(this.contractWrapper.address,s)}getLinkContract(){const s=at[this.chainId];if(!s)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const t=new W(this.contractWrapper.getSignerOrProvider(),s,et,this.contractWrapper.options,this.storage);return new nt(t,this.storage,this.chainId)}}const C=class C extends ct{constructor(t,e,n){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(t,e,o,r.gasless&&"openzeppelin"in r.gasless?{...r,gasless:{...r.gasless,openzeppelin:{...r.gasless.openzeppelin,useEOAForwarder:!0}}}:r,n);super(d,n,p);g(this,"create",k(async t=>{const e=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(e,t)}));g(this,"addPackContents",k(async(t,e)=>{const[n,r]=await Promise.all([this.contractWrapper.getSignerAddress(),q.parseAsync(e)]),{contents:o,numOfRewardUnits:p}=await this.toPackContentArgs(r);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,o,p,n],parse:d=>{const c=this.contractWrapper.parseLogs("PackUpdated",d==null?void 0:d.logs);if(c.length===0)throw new Error("PackUpdated event not found");const a=c[0].args.packId;return{id:a,receipt:d,data:()=>this.erc1155.get(a)}}})}));g(this,"createTo",k(async(t,e)=>{const[n,r,o]=await Promise.all([j(e.packMetadata,this.storage),kt.parseAsync(e),O(t)]),{erc20Rewards:p,erc721Rewards:d,erc1155Rewards:c}=r,a={erc20Rewards:p,erc721Rewards:d,erc1155Rewards:c},{contents:h,numOfRewardUnits:i}=await this.toPackContentArgs(a);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[h,i,n,r.openStartTime,r.rewardsPerPack,o],parse:u=>{const P=this.contractWrapper.parseLogs("PackCreated",u==null?void 0:u.logs);if(P.length===0)throw new Error("PackCreated event not found");const I=P[0].args.packId;return{id:I,receipt:u,data:()=>this.erc1155.get(I)}}})}));g(this,"open",k((()=>{var t=this;return async function(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;if(t._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return f.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,n],overrides:{gasLimit:r},parse:async o=>{const p=t.contractWrapper.parseLogs("PackOpened",o==null?void 0:o.logs);if(p.length===0)throw new Error("PackOpened event not found");const d=p[0].args.rewardUnitsDistributed,c=[],a=[],h=[];for(const i of d)switch(i.tokenType){case 0:{const u=await y(t.contractWrapper.getProvider(),i.assetContract);c.push({contractAddress:i.assetContract,quantityPerReward:A(i.totalAmount,u.decimals).toString()});break}case 1:{a.push({contractAddress:i.assetContract,tokenId:i.tokenId.toString()});break}case 2:{h.push({contractAddress:i.assetContract,tokenId:i.tokenId.toString(),quantityPerReward:i.totalAmount.toString()});break}}return{erc20Rewards:c,erc721Rewards:a,erc1155Rewards:h}}})}})()));this.abi=x.parse(o||[]),this.metadata=new _(this.contractWrapper,z,this.storage),this.app=new D(this.contractWrapper,this.metadata,this.storage),this.roles=new M(this.contractWrapper,C.contractRoles),this.royalties=new V(this.contractWrapper,this.metadata),this.encoder=new K(this.contractWrapper),this.estimator=new B(this.contractWrapper),this.events=new T(this.contractWrapper),this.interceptor=new Q(this.contractWrapper),this.owner=new G(this.contractWrapper),this._vrf=this.detectVrf()}get vrf(){return N(this._vrf,b)}onNetworkUpdated(t){var e;this.contractWrapper.updateSignerOrProvider(t),(e=this._vrf)==null||e.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[H("transfer"),Y])}async getPackContents(t){const{contents:e,perUnitAmounts:n}=await this.contractWrapper.read("getPackContents",[t]),r=[],o=[],p=[];for(let d=0;d<e.length;d++){const c=e[d],a=n[d];switch(c.tokenType){case 0:{const h=await y(this.contractWrapper.getProvider(),c.assetContract),i=A(a,h.decimals),u=A(l.from(c.totalAmount).div(a),h.decimals);r.push({contractAddress:c.assetContract,quantityPerReward:i,totalRewards:u});break}case 1:{o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break}case 2:{p.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:a.toString(),totalRewards:l.from(c.totalAmount).div(a).toString()});break}}}return{erc20Rewards:r,erc721Rewards:o,erc1155Rewards:p}}async toPackContentArgs(t){const e=[],n=[],{erc20Rewards:r,erc721Rewards:o,erc1155Rewards:p}=t,d=this.contractWrapper.getProvider(),c=await this.contractWrapper.getSignerAddress();for(const a of r){const i=(await J(d,a.quantityPerReward,a.contractAddress)).mul(a.totalRewards);if(!await ot(this.contractWrapper,a.contractAddress,i))throw new Error(`ERC20 token with contract address "${a.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${a.contractAddress}").setAllowance("${this.getAddress()}", ${i});

`);n.push(a.totalRewards),e.push({assetContract:a.contractAddress,tokenType:0,totalAmount:i,tokenId:0})}for(const a of o){if(!await S(this.contractWrapper.getProvider(),this.getAddress(),a.contractAddress,a.tokenId,c))throw new Error(`ERC721 token "${a.tokenId}" with contract address "${a.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${a.contractAddress}").setApprovalForToken("${this.getAddress()}", ${a.tokenId});

`);n.push("1"),e.push({assetContract:a.contractAddress,tokenType:1,totalAmount:1,tokenId:a.tokenId})}for(const a of p){if(!await S(this.contractWrapper.getProvider(),this.getAddress(),a.contractAddress,a.tokenId,c))throw new Error(`ERC1155 token "${a.tokenId}" with contract address "${a.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${a.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);n.push(a.totalRewards),e.push({assetContract:a.contractAddress,tokenType:2,totalAmount:l.from(a.quantityPerReward).mul(l.from(a.totalRewards)),tokenId:a.tokenId})}return{contents:e,numOfRewardUnits:n}}async prepare(t,e,n){return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:n})}async call(t,e,n){return this.contractWrapper.call(t,e,n)}detectVrf(){if(Z(this.contractWrapper,"PackVRF"))return new ft(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.address,this.storage,this.contractWrapper.options,this.chainId)}};g(C,"contractRoles",$);let E=C;export{E as Pack};
